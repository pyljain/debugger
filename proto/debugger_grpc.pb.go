// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: proto/debugger.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Debugger_CreateLease_FullMethodName  = "/Debugger/CreateLease"
	Debugger_ApproveLease_FullMethodName = "/Debugger/ApproveLease"
	Debugger_ListLease_FullMethodName    = "/Debugger/ListLease"
)

// DebuggerClient is the client API for Debugger service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DebuggerClient interface {
	CreateLease(ctx context.Context, in *CreateLeaseRequest, opts ...grpc.CallOption) (*Lease, error)
	ApproveLease(ctx context.Context, in *ApproveLeaseRequest, opts ...grpc.CallOption) (*Lease, error)
	ListLease(ctx context.Context, in *ListLeaseRequest, opts ...grpc.CallOption) (*ListLeaseResponse, error)
}

type debuggerClient struct {
	cc grpc.ClientConnInterface
}

func NewDebuggerClient(cc grpc.ClientConnInterface) DebuggerClient {
	return &debuggerClient{cc}
}

func (c *debuggerClient) CreateLease(ctx context.Context, in *CreateLeaseRequest, opts ...grpc.CallOption) (*Lease, error) {
	out := new(Lease)
	err := c.cc.Invoke(ctx, Debugger_CreateLease_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debuggerClient) ApproveLease(ctx context.Context, in *ApproveLeaseRequest, opts ...grpc.CallOption) (*Lease, error) {
	out := new(Lease)
	err := c.cc.Invoke(ctx, Debugger_ApproveLease_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debuggerClient) ListLease(ctx context.Context, in *ListLeaseRequest, opts ...grpc.CallOption) (*ListLeaseResponse, error) {
	out := new(ListLeaseResponse)
	err := c.cc.Invoke(ctx, Debugger_ListLease_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DebuggerServer is the server API for Debugger service.
// All implementations must embed UnimplementedDebuggerServer
// for forward compatibility
type DebuggerServer interface {
	CreateLease(context.Context, *CreateLeaseRequest) (*Lease, error)
	ApproveLease(context.Context, *ApproveLeaseRequest) (*Lease, error)
	ListLease(context.Context, *ListLeaseRequest) (*ListLeaseResponse, error)
	mustEmbedUnimplementedDebuggerServer()
}

// UnimplementedDebuggerServer must be embedded to have forward compatible implementations.
type UnimplementedDebuggerServer struct {
}

func (UnimplementedDebuggerServer) CreateLease(context.Context, *CreateLeaseRequest) (*Lease, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLease not implemented")
}
func (UnimplementedDebuggerServer) ApproveLease(context.Context, *ApproveLeaseRequest) (*Lease, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApproveLease not implemented")
}
func (UnimplementedDebuggerServer) ListLease(context.Context, *ListLeaseRequest) (*ListLeaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLease not implemented")
}
func (UnimplementedDebuggerServer) mustEmbedUnimplementedDebuggerServer() {}

// UnsafeDebuggerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DebuggerServer will
// result in compilation errors.
type UnsafeDebuggerServer interface {
	mustEmbedUnimplementedDebuggerServer()
}

func RegisterDebuggerServer(s grpc.ServiceRegistrar, srv DebuggerServer) {
	s.RegisterService(&Debugger_ServiceDesc, srv)
}

func _Debugger_CreateLease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLeaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebuggerServer).CreateLease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Debugger_CreateLease_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebuggerServer).CreateLease(ctx, req.(*CreateLeaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Debugger_ApproveLease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApproveLeaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebuggerServer).ApproveLease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Debugger_ApproveLease_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebuggerServer).ApproveLease(ctx, req.(*ApproveLeaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Debugger_ListLease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLeaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebuggerServer).ListLease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Debugger_ListLease_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebuggerServer).ListLease(ctx, req.(*ListLeaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Debugger_ServiceDesc is the grpc.ServiceDesc for Debugger service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Debugger_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Debugger",
	HandlerType: (*DebuggerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateLease",
			Handler:    _Debugger_CreateLease_Handler,
		},
		{
			MethodName: "ApproveLease",
			Handler:    _Debugger_ApproveLease_Handler,
		},
		{
			MethodName: "ListLease",
			Handler:    _Debugger_ListLease_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/debugger.proto",
}
